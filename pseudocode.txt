# CS Slots Game
# By Steve Xero
# CIT 129 - Introduction to Programming
 
# Write up about game
In the spirit of Vegas, my home, I've built a slot machine simulator.  One of the challenges for this project included implementing a dictionary.  At first, for this particular idea, a dictionary didn't seem the right data structure to use, until the idea of "high roller" came to mind.  It gave me the opportunity to extend my initial pay table to include two statuses, low baller and high roller.  When it came to the other required items (loops, arrays, functions), they were completely necessary to build the game.  The symbols array houses the unique elements in which to compare, and the spin function returns an array that is made up of a combination of those symbols, which is then passed alongside the bet amount to calculate the payout, if any.  I've included several while loops, most of which are to validate either user input or the flow of the game based on the status and money that the user has.  I've made use of for loops as well, one just as an iterator and another to traverse the symbols in the symbols array and validate patterns.  As for implementing files, I found it necessary in order to save the user's status and money balance, so that they may come and play any time while keeping their winnings.
 
# Pseudocode
Start
Declare money_file_name, status_file_name, status, symbols[] As String
Declare money As Integer
Declare money_file, status_file As FileObject()
Declare pay_table as Dict()
 
Set money_file_name = "money.txt"
Set status_file_name = "status.txt"
 
# Game files
# money
If !(exists(money_file)) Then
    Set money_file = Open(money_file_name, x)
    money_file.Write("700")
    Set money = Int(money_file.Read())
    money_file.Close()
Else
    Set money_file = Open(money_file_name, r)
    Set money = Int(money_file.Read())
    money_file.Close()
End If
 # status
If !(exists(status_file)) Then
    Set status_file = Open(status_file_name, x)
    status_file.Write("low baller")
    Set status= status_file.Read()
    status_file.Close()
Else
    Set status_file = Open(status_file_name, r)
    Set status = status_file.Read()
    status_file.Close()
End If
 
# symbols and pay table
Set symbols[1] = "C"
Set symbols[2] = "C++"
Set symbols[3] = "Scala"
Set symbols[4] = "Haskell"
Set symbols[5] = "COBOL"
Set symbols[6] = "Fortran"
 
Set pay_table = {
    "C, C++, Scala": {
        "extended reels": "Haskell, Fortran",
        "high roller": 10000,
        "low baller": 1000
    },
    "C, C, C": {
        "extended reels": "C, C",
        "high roller": 100,
        "low baller": 10
    },
    "C++, C++, C++": {
        "extended reels": "C++, C++",
        "high roller": 90,
        "low baller": 9
    },
    "Scala, Scala, Scala": {
        "extended reels": "Scala, Scala",
        "high roller": 80,
        "low baller": 8
    },
    "Haskell, Haskell, Haskell": {
        "extended reels": "Haskell, Haskell"
        "high roller": 70,
        "low baller": 7
    },
    "COBOL, COBOL, COBOL": {
        "extended reels": "COBOL, COBOL",
        "high roller": 60,
        "low baller": 6
    },
    "Fortran, Fortran, Fortran": {"extended reels": "Fortran, Fortran",
        "high roller": 50,
        "low baller": 5
    }
}
 
# Check for sequences and patterns in pay table
Function update_pay_table()
    For (symbol in symbols)
        If (status == 'high roller') Then
            pay_table[symbol + symbol + symbol + symbol + '_'] = 20
            pay_table['_' + symbol + symbol + symbol + symbol] = 20
            pay_table[symbol + symbol + '_' + symbol + symbol] = 10
            pay_table[symbol + symbol + symbol + '_' + '_'] = 5
            pay_table['_' + symbol + symbol + symbol + '_'] = 5
            pay_table['_' + '_' + symbol + symbol + symbol] = 5
            pay_table[symbol + symbol + '_' + '_' + '_'] = 1
            pay_table['_' + symbol + symbol + '_' + '_'] = 1
            pay_table['_' + '_' + symbol + symbol + '_'] = 1
            pay_table['_' + '_' + '_' + symbol + symbol] = 1
        Else:  # status = low baller
            pay_table[symbol + symbol + '_'] = 1
            pay_table['_' + symbol + symbol] = 1
        End If
    End For
End Function
 
# Main menu
Function menu()
    Declare ch As Integer
    While (True)
        Try
            Print "- (1) To play, enter 1\n"
                  "- (2) To see the pay table, enter 2\n"
                  "- (3) To view your status and balance, enter 3\n"
                  "- (4) To view the instructions, enter 4\n"
                  "- (5) To exit, enter 5\n"
                  "-> Choice: "
            Input ch
            If (ch < 1 or ch > 5) Then
                Print "Invalid choice."
                Continue
            Else
                Return ch
            End If
        Except (error)
            Print "Invalid input. Please enter a number."
    End While
End Function
 
# Welcome screen
Function welcome()
    Print "Welcome to the CS Slots game!"
End Function
 
# Display instruction
Function instructions()
    Print "Starting status: low baller\n"
          "Starting balance: 700\n"
          "Low ballers can bet between 1 and 5 and have 3 reels\n"
          "that have 4 combos to win.\n"
          "High ballers can bet between 6 and 20 and have 5 reels\n"
          "that have 12 combos to win.\n"
          "Your bet amount is a multiplier for the specified winnings\n"
          "amount in the pay table, depending on the combination spun.\n\"
          "To achieve high roller status, get your balance up to 1000\n"
          "If your balance falls below 800, you will be reverted to low baller status\n"
End Function
 
# Calculate payout
Function pay_calc(results As Array, bet As Integer)
    Declare result_keyAs String
    # Join elements of results array to form a string
    Set result_key = ", ".Join(results)
    # Checks if the results are in the pay_table dict
    If (result_key In pay_table) Then
        If (result_key == "CC++ScalaHaskellFortran" And status == "high roller") Then
            Return pay_table[result_key]['high roller'] * bet
        Else If (result_key == "CC++Scala" And status == "low baller") Then
            Return pay_table[result_key]['low baller'] * bet
        End If
        Return pay_table[result_key][status] * bet
    # Checks for sequences or patterns in the pay_table dict
    Else
        If (status == "high roller") Then
            # First four in a row
            # NOTE: first and last values of slices are inclusive
            If (result_key.Slice(1,4) + '_' in pay_table) Then
                Return pay_table[result_key.Slice(1,4) + '_'] * bet
            # Last four in a row
            Else If ('_' + result_key.Slice(2, len(result_key)) in pay_table) Then
                Return pay_table['_' + result_key.Slice(2, len(result_key))] * bet
            # First two, any, last two
            Else If (result_key.Slice(1,2) + '_' + result_key.Slice(3,len(result_key)) in pay_table) Then
                Return pay_table[result_key.Slice(1,2) + '_' + result_key.Slice(3,len(result_key))] * bet
            # First three in a row
            Else If (result_key.Slice(1,3) + '_' + '_' in pay_table) Then
                Return pay_table[result_key.Slice(1,3) + '_' + '_'] * bet
            # any, three in a row, any
            Else If ('_' + result_key.Slice(2,4) + '_' in pay_table) Then
                Return pay_table['_' + result_key.Slice(2,4) + '_'] * bet
            # Last three in a row
            Else If ('_' + '_' + result_key.Slice(3, len(result_key)) in pay_table) Then
                Return pay_table['_' + '_' + result_key.Slice(3, len(result_key))] * bet
            # First two in a row
            Else If (result_key.Slice(1, 2) + '_' + '_' + '_' in pay_table) Then
                Return pay_table[result_key.Slice(1, 2) + '_' + '_' + '_'] * bet
            # any, two in a row, any, any
            Else If ('_' + result_key.Slice(2,3) + '_' + '_' in pay_table) Then
                Return pay_table['_' + result_key.Slice(2,3) + '_' + '_'] * bet
            # any, any, two in a row, any
            Else If ('_' + '_' + result_key.Slice(3,4) + '_' in pay_table) Then
                Return pay_table['_' + '_' + result_key.Slice(3,4) + '_'] * bet
            # Last two in a row
            Else If ('_' + '_' + '_' + result_key.Slice(4, len(result_key)) in pay_table) Then
                Return pay_table['_' + '_' + '_' + result_key.Slice(4, len(result_key))] * bet
            # Do nothing
            Else
                Pass
            End If
        Else
            # First two in a row
            If (result_key.Slice(1, 2) + '_' in pay_table) Then
                Return pay_table[result_key.Slice(1, 2) + '_'] * bet
            # Last two in a row
            Else If ('_' + result_key.Slice(2, len(result_key)) in pay_table) Then
                Return pay_table['_' + result_key.Slice(2, len(result_key))] * bet
            Else
                Pass
            End If
        End If
    End If
 
    # Returns 0 if nothing is found in the pay_table dict
    Return 0
End Function
 
# Spin reels
Function spin()
    Declare num_reels, i As Integer
    Declare results[], symbol As String
    # Spins x number of reels depending on status
    If (status == "high roller") Then
        Set num_reels = 5
    Else
        Set num_reels = 3
    End If
    For (i = 1, i <= num_reels, i++)
        # Sets symbol to a random choice for each reel and appends to results array
        # Random.Choice chooses a random element from the symbols array
        Set symbol = Random.Choice(symbols)
        results.AppendArray()
        # Reset symbol to an empty string
        Set symbol = ""
    End For
    Return results
End Function
 
# Game play loop
Function play()
    Declare results[], ch As String
    Declare bet, payout As Integer
    Print "Your current balance is: " + Str(money)
    Print "Ready to play!  Enter -1 at any time to quit to the main menu"
    While (True)
        # Take the user's bet as input, -1 to return to the main menu
        # try-except to validate user's input
        Try
            # Get user's bet based on status
            If (status == "high roller") Then
                Print " Place your bet between 6 and 20: "
                Input bet
                If (bet != -1 And bet < 6 Or bet > 20) Then
                    Print " Invalid entry"
                    Continue
                End If
            Else
                Print " Place your bet between 6 and 20: "
                Input bet
                If (bet != -1 and bet < 1 or bet > 5) Then
                    Print " Invalid entry"
                    Continue
                End If
            End If
            # Check user's bet
            If (bet == -1) Then
                exit_game()
                Break
            Else
                Print "You've bet " + Str(bet) + ", good luck!"
                # Spin the reels and set to results array
                Set results = spin()
                # Display the results of the spin
                Print "You've spun " + Str(results)
                # Calculate the payout
                Set payout = pay_calc(results, bet)
                If (payout > 0) Then
                    Print "Woohoo!  You've won " + Str(payout) + "!"
                End If
                # Sets money to the payout less the bet amount
                Set money = money - bet + payout
                # Shows user their balance
                Print "Your new balance is: " + Str(money)
                # Checks the status of the user's money
                # Gives user the chance to reset their balance if they go to 0
                If (money <= 0) Then
                    Print "Reset money to 700? Enter y or n: "
                    Input ch
                    If (ch.Lower() == "y") Then
                        Set money = 700
                    Else
                        Break
                    End If
                # Upgrade the status of the user if their balance goes over 1000
                Else If (money >= 1000 And status != "high roller") Then
                    Print "Woohoo! You've reached high-roller status!!!"
                    # Update the status file
                    Set status_file = Open(status_file_name, w)
                    status_file.Write("high roller")
                    Set status= status_file.Read()
                    status_file.Close()
                    # Call an update to the pay table to keep the payouts current
                    update_pay_table()
                Else If (money <= 800 and status != "low baller") Then
                    Print "Womp Womp, you lost your high-roller status"
                    Set status_file = Open(status_file_name, w)
                    status_file.Write("low baller")
                    Set status= status_file.Read()
                    status_file.Close()
                    # Call an update to the pay table to keep the payouts current
                    update_pay_table()
                Else
                    Pass
                End If
            End If
        Except (error)
            Print "Invalid input"
    End While
End Function
 
# Print pay table
Function display_pay_table()
    Print "--- Pay Table ---"
    Print "High Rollers:\n"
    Print "\tJackpot: C, C++, Scala, Haskell, Fortran: 10000 * bet amount\n"
    Print "\tC, C, C, C, C: 100 * bet amount\n"
    Print "\tC++, C++, C++, C++, C++: 90 * bet amount\n"
    Print "\tScale, Scala, Scala, Scala, Scala: 80 * bet amount \n"
    Print "\tHaskell, Haskell, Haskell, Haskell, Haskell: 70 * bet amount \n"
    Print "\tCOBOL, COBOL, COBOL, COBOL, COBOL: 60 * bet amount \n"
    Print "\tFortran, Fortran, Fortran, Fortran, Fortran: 50 * bet amount \n"
    Print "\tAny 4-in-a-row: 20 * bet amount \n"
    Print "\t2-in-the-front and 2-in-the-rear: 10 * bet amount \n"
    Print "\tAny 3-in-a-row: 5 * bet amount \n"
    Print "\tAny 2-in-a-row: 1 * bet amount \n"
    Print "Low Ballers:\n"
    Print "\tJackpot: C, C++, Scala: 1000 * bet amount\n"
    Print "\tC, C, C: 10 * bet amount\n"
    Print "\tC++, C++, C++9 * bet amount\n"
    Print "\tScale, Scala, Scala: 8 * bet amount \n"
    Print "\tHaskell, Haskell, Haskell: 7 * bet amount \n"
    Print "\tCOBOL, COBOL, COBOL: 6 * bet amount \n"
    Print "\tFortran, Fortran, Fortran: 5 * bet amount \n"
    Print "\tAny 2-in-a-row: 1 * bet amount \n"
End Function
 
# View player status and balance
Function view_status_and_balance()
    Print "Your current status is " + status
    Print "Your current balance is " + str(money)
End Function
 
# Exit game
Function exit_game()
    Set money_file = Open(money_file_name, w)
    money_file.Write(str(money))
    money_file.Close()
    Print " Thanks for playing CS slots!"
    Print "Your status on leaving is " + status
    Print "Your balance on leaving is " + str(money)
End Function
 
# Main
Function Main()
    Declare ch As Integer
    Declare choice As String
    While (True)
        welcome()
        update_pay_table()
        Set ch = menu()
        If (ch == 1) Then
            If (money <= 0) Then
                Print "No money. Reset to 700?"
                Input choice
                If (choice.Lower() != "y") Then
                    Set money = 700
                Else
                    Continue
                End
            Else
                play()
            End If
        Else If (ch == 2) Then
            display_pay_table()
        Else If (ch == 3) Then
            view_status_and_balance()
        Else If (ch == 4) Then
            instructions()
        Else
            exit_game()
        End If
    End While
End Function
 
Main()
End
